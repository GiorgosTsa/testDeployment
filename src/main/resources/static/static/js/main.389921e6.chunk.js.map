{"version":3,"sources":["logo.svg","serviceWorker.js","components/splitWords.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ENDPOINT","ClientComponent","useState","splitWords","setSplitWords","setResult","setSplitWord","splitWordArray","setSplitWordArray","endResult","setEndResult","GetButtonContent","e","length","target","innerHTML","newArray","push","socket","socketIOClient","console","log","emit","join","on","data","useEffect","className","map","item","key","word","onClick","firstPart","secondPart","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,+LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCChBAC,EAAW,yCAEF,SAASC,IAAmB,IAAD,EACJC,mBAAS,IADL,mBACjCC,EADiC,KACrBC,EADqB,OAEZF,qBAFY,mBAEzBG,GAFyB,aAGNH,mBAAS,IAHH,mBAGtBI,GAHsB,aAIIJ,mBAAS,IAJb,mBAIjCK,EAJiC,KAIjBC,EAJiB,OAKNN,mBAAS,IALH,mBAKjCO,EALiC,KAKtBC,EALsB,KAcxC,SAASC,EAAiBC,GACxB,GAAIL,EAAeM,QAAU,EAC3BL,EAAkB,IAClBA,EAAkB,CAACI,EAAEE,OAAOC,gBACvB,CACL,IAAMC,EAAWT,EACjBS,EAASC,KAAKL,EAAEE,OAAOC,WACvBP,EAAkBQ,GAIpB,IAAME,EAASC,IAAenB,GAC9BoB,QAAQC,IAAId,EAAgBA,EAAeM,QACb,IAA1BN,EAAeM,SACjBK,EAAOI,KAAK,SAAUf,EAAegB,KAAK,KAC1CjB,EAAa,IACbE,EAAkB,IAClBU,EAAOM,GAAG,UAAU,SAAAC,GAClBpB,EAAUoB,GACVL,QAAQC,IAAII,GAEVf,EADEe,EACW,kBAEA,qBAOrB,OArCAC,qBAAU,WACOP,IAAenB,GACvBwB,GAAG,mBAAmB,SAAAC,GAC3BrB,EAAcqB,EAAKtB,iBAEpB,IAiCD,yBAAKwB,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,UAAf,WAGA,yBAAKA,UAAU,eAAf,UAKJ,yBAAKA,UAAU,OAAf,SAGA,yBAAKA,UAAU,OAAf,SAIF,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OAEXxB,EAAWyB,KAAI,SAACC,GAAD,OACb,yBAAKF,UAAU,WAAWG,IAAKD,EAAKE,MAClC,4BAAQJ,UAAU,8BAA8BK,QAASrB,GAAmBkB,EAAKI,eAKrF9B,EAAWyB,KAAI,SAACC,GAAD,OACb,yBAAKF,UAAU,WAAWG,IAAKD,EAAKE,MAClC,4BAAQJ,UAAU,uBAAuBK,QAASrB,GAAmBkB,EAAKK,iBAMlF,yBAAKP,UAAU,OACb,+BACA,iDACA,yBAAKA,UAAU,gBACb,4BAAQA,UAAU,OAAlB,YAIN,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OAAf,SAEA,yBAAKA,UAAU,aAAalB,GAC1B,yBAAKkB,UAAU,aAAf,QC1FVQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.389921e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"https://brainbright.herokuapp.com:8080\";\r\n\r\nexport default function ClientComponent() {\r\n  const [splitWords, setSplitWords] = useState([]);\r\n  const [result, setResult] = useState();\r\n  const [splitWord, setSplitWord] = useState('');\r\n  const [splitWordArray, setSplitWordArray] = useState([]);\r\n  const [endResult, setEndResult] = useState('');\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(ENDPOINT);\r\n    socket.on(\"all_split_words\", data => {\r\n      setSplitWords(data.splitWords);\r\n    });\r\n  }, []);\r\n\r\n  function GetButtonContent(e) {\r\n    if (splitWordArray.length >= 2) {\r\n      setSplitWordArray([]);\r\n      setSplitWordArray([e.target.innerHTML]);\r\n    } else {\r\n      const newArray = splitWordArray;\r\n      newArray.push(e.target.innerHTML)\r\n      setSplitWordArray(newArray);\r\n    }\r\n\r\n\r\n    const socket = socketIOClient(ENDPOINT);\r\n    console.log(splitWordArray, splitWordArray.length)\r\n    if (splitWordArray.length === 2) {\r\n      socket.emit(\"result\", splitWordArray.join(''));\r\n      setSplitWord('');\r\n      setSplitWordArray([]);\r\n      socket.on(\"result\", data => {\r\n        setResult(data);\r\n        console.log(data);\r\n        if (data) {\r\n          setEndResult('You are correct');\r\n        } else {\r\n          setEndResult('You are wrong');\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4\">\r\n        <div className=\"row\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"player\">\r\n              Player:\r\n                    </div>\r\n            <div className=\"player-name\">\r\n              Name\r\n                    </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          Level\r\n            </div>\r\n        <div className=\"row\">\r\n          Menu\r\n            </div>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <div className=\"row\">\r\n          {\r\n            splitWords.map((item) =>\r\n              <div className=\"col-md-3\" key={item.word}>\r\n                <button className=\"btn btn-primary text-center\" onClick={GetButtonContent}>{item.firstPart}</button>\r\n              </div>\r\n            )\r\n          }\r\n          {\r\n            splitWords.map((item) =>\r\n              <div className=\"col-md-3\" key={item.word}>\r\n                <button className=\"btn btn-primary mb-3\" onClick={GetButtonContent}>{item.secondPart}</button>\r\n              </div>\r\n            )\r\n          }\r\n\r\n        </div>\r\n        <div className=\"row\">\r\n          <span></span>\r\n          <span>Incorrect pair:</span>\r\n          <div className=\"button-class\">\r\n            <button className=\"btn\">Clear</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-2\">\r\n        <div className=\"row\">\r\n          Round:\r\n        <div className=\"col-md-12\">{endResult}</div>\r\n          <div className=\"col-md-12\">2</div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SplitWords from \"./components/splitWords\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SplitWords />\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}