{"version":3,"sources":["serviceWorker.js","components/splitWords/splitWords.jsx","index.js"],"names":["Boolean","window","location","hostname","match","socket","SockJS","Stomp","connect","frame","console","log","this","subscribe","result","client","send","getSplitWords","ClientComponent","className","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wDCHN,WAME,IAAIC,EAAS,IAAIC,IAAO,+CACVC,OAAWF,GAEbG,QAAQ,IAAI,SAAUC,GAEhCC,QAAQC,IAAIC,KAAM,UASlBA,KAAKC,UAAU,wBAAwB,SAAUC,GAG/CJ,QAAQC,IAAIG,MAMlB,SAAuBC,GACrBL,QAAQC,IAAI,sBACZI,EAAOC,KAAK,qBAAsB,GAAI,MANpCC,CAAcL,SAhClBJ,GAyCe,SAASU,IA+CtB,OACE,yBAAKC,UAAU,mBAAf,QCzFJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.5495d269.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport splitWordStyle from \"./style.css\";\nimport * as Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport SockJsClient from 'react-stomp';\n// const ENDPOINT = \"http://127.0.0.1:3060\";\n// const socket = socketIOClient(ENDPOINT);\nconnect();\n\nvar stompClient = null;\nvar buttonStack = [];\nvar splitWords = [];\n\n\nfunction connect() {\n  // <SockJsClient \n  // url='http://localhost:8080/brainbright-websocket' \n  // topics={['/topic/splitwordlist']}\n  //   onMessage={(msg) => { console.log(msg); }}\n  //   ref={(client) => { this.clientRef = client }} />\n  var socket = new SockJS('http://127.0.0.1:8080/brainbright-websocket');\n  stompClient = Stomp.over(socket);\n  \n  stompClient.connect({}, function (frame) {\n    // console.log('Connected: ' + frame);\n    console.log(this, 'CLIENT');\n    // stompClient.subscribe('/topic/validactionresponse', function(splitwords) {\n    // \t// if (!JSON.parse(splitwords.body)) {\n    // \t// \tshowResponse(\"That's wrong!\");\n    // \t// } else {\n    // \t// \tshowResponse(\"Correct!\");\t\n    //   // }\n    //   console.log(splitWords)\n    // });\n    this.subscribe('/topic/splitwordlist', function (result) {\n      // splitWords = JSON.parse(result.body);\n      // initButtons();\n      console.log(result);\n    });\n    getSplitWords(this);\n  });\n}\n\nfunction getSplitWords(client) {\n  console.log(\"ayo? getsplitwords\");\n  client.send(\"/app/getsplitwords\", {}, null);\n}\n\nexport default function ClientComponent() {\n  // const [splitWords, setSplitWords] = useState([]);\n  // const [result, setResult] = useState();\n  // const [splitWord, setSplitWord] = useState('');\n  // const [splitWordArray, setSplitWordArray] = useState([]);\n  // const [endResult, setEndResult] = useState('');\n\n  // useEffect(() => {\n  //   socket.on(\"all_split_words\", data => {\n  //     let array = new Array(24 - data.splitWords.length * 2).fill(' ');\n  //     data.splitWords.map((item) => {\n  //       array.splice(Math.floor(Math.random() * 24), 0, item.firstPart);\n  //       array.splice(Math.floor(Math.random() * 24), 0, item.secondPart);\n  //     });\n  //     setSplitWords(array);\n  //   });\n  // }, []);\n\n\n  // function GetButtonContent(e) {\n\n  //   if (splitWordArray.length >= 2) {\n  //     setSplitWordArray([]);\n  //     setSplitWordArray([e.target.innerHTML]);\n  //   } else {\n  //     const newArray = splitWordArray;\n  //     newArray.push(e.target.innerHTML);\n  //     console.log(splitWordArray.length);\n  //     setSplitWordArray(newArray);\n  //   }\n\n  //   if (splitWordArray.length === 2) {\n  //     socket.emit(\"result\", splitWordArray.join(''));\n  //     setSplitWord('');\n  //     setSplitWordArray([]);\n  //     socket.on(\"result\", data => {\n  //       setResult(data);\n  //       if (data) {\n  //         setEndResult('You are correct');\n  //       } else {\n  //         setEndResult('You are wrong');\n  //       }\n  //     });\n  //   }\n  // }\n\n\n  return (\n    <div className=\"container-fluid\">test\n      {/* <div className=\"row\">\n        <div className=\"col-md-3\">\n          <div className=\"d-flex\">\n            <div className=\"player\">\n              Player:\n                </div>\n            <div className=\"player-name\">\n              Name\n              </div>\n          </div>\n\n          <div className=\"\">\n            Level\n            </div>\n          <div className=\"\">\n            Menu\n            </div>\n        </div>\n        <div className=\"col-md-6 text-center all_words\">\n          <div className=\"row\">\n            {\n              splitWords.map((item) =>\n                <div className=\"col-md-3\" key={item.word}>\n                  {item !== ' ' ? <button className=\"btn btn-primary mb-5 p-3 rounded border-0\" onClick={GetButtonContent}>{item}</button> : <br></br>}\n                </div>\n              )\n            }\n\n          </div>\n          <div className=\"result p-2\">Incorrect pair:</div>\n          <button className=\"btn pl-5 pr-5 pt-2 pb-2 mt-5\">Clear</button>\n\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"text-center\">\n            Round:\n            <div>{endResult}</div>\n            <div>2</div>\n          </div>\n\n        </div>\n\n      </div> */}\n    </div>\n  )\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SplitWords from \"./components/splitWords/splitWords\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SplitWords />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}