{"version":3,"sources":["serviceWorker.js","components/splitWords/splitWords.jsx","index.js"],"names":["Boolean","window","location","hostname","match","socket","SockJS","stompClient","Stomp","ClientComponent","useState","splitWords","setSplitWords","setSplitWord","splitWordArray","setSplitWordArray","endResult","setEndResult","splitWordText","setSplitWordText","getButtonContent","e","length","target","innerHTML","newArray","push","subscribe","splitwords","JSON","parse","body","send","stringify","useEffect","connect","this","data","array","Array","fill","map","item","splice","Math","floor","random","firstPart","secondPart","className","key","word","onClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yCCbFC,EAAS,I,OAAIC,GAAO,2DACpBC,EAAcC,OAAWH,GAMd,SAASI,IAAmB,IAAD,EACJC,mBAAS,IADL,mBACjCC,EADiC,KACrBC,EADqB,OAENF,mBAAS,IAFH,mBAEtBG,GAFsB,aAGIH,mBAAS,IAHb,mBAGjCI,EAHiC,KAGjBC,EAHiB,OAINL,mBAAS,IAJH,mBAIjCM,EAJiC,KAItBC,EAJsB,OAKEP,mBAAS,IALX,mBAKjCQ,EALiC,KAKlBC,EALkB,KA8BxC,SAASC,EAAiBC,GACxB,GAAIP,EAAeQ,QAAU,EACC,GAA5BP,EAAkBO,OAAcP,EAAkB,IAAMI,EAAiB,IACzEJ,EAAkB,CAACM,EAAEE,OAAOC,YAC5BL,EAAiB,CAACE,EAAEE,OAAOC,gBACtB,CACL,IAAMC,EAAWX,EACjBW,EAASC,KAAKL,EAAEE,OAAOC,WACvBT,EAAkBU,GAClBN,EAAiBM,GAGW,IAA1BX,EAAeQ,SAEjBT,EAAa,IACbE,EAAkB,IAClBR,EAAYoB,UAAU,8BAA8B,SAAUC,GACvDC,KAAKC,MAAMF,EAAWG,MAGzBd,EAAa,mBAFbA,EAAa,oBAKjBV,EAAYyB,KAAK,mBAAoB,GAAIH,KAAKI,UAAU,CAAE,UAAanB,EAAe,GAAI,WAAcA,EAAe,OAI3H,OAlDAoB,qBAAU,WAER3B,EAAY4B,QAAQ,IAAI,WAEtBC,KAAKT,UAAU,wBAAwB,SAAUU,GAC/C,IAAIC,EAAQ,IAAIC,MAAM,GAAoC,EAA/BV,KAAKC,MAAMO,EAAKN,MAAMT,QAAYkB,KAAK,KAClEX,KAAKC,MAAMO,EAAKN,MAAMU,KAAI,SAACC,GACzBJ,EAAMK,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAgB,EAAGJ,EAAKK,WACrDT,EAAMK,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAgB,EAAGJ,EAAKM,eAEvDpC,EAAc0B,MAGFF,KAvBXJ,KAAK,qBAAsB,GAAI,WAyBnC,IAoCD,yBAAKiB,UAAU,mBAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,UAAf,WAGA,yBAAKA,UAAU,eAAf,SAKF,yBAAKA,UAAU,IAAf,SAGA,yBAAKA,UAAU,IAAf,SAIF,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,OAEXtC,EAAW8B,KAAI,SAACC,GAAD,OACb,yBAAKO,UAAU,oBAAoBC,IAAKR,EAAKS,MACjC,MAATT,EAAe,4BAAQO,UAAU,4CAA4CG,QAAShC,GAAmBsB,GAAiB,kCAMnI,yBAAKO,UAAU,cACW,GAAxB/B,EAAcI,OAAc,oBAC1BJ,EAAcuB,KAAI,SAACC,GAAD,OAChB,8BAAOA,OAGb,yBAAKO,UAAU,QAAQjC,GACvB,4BAAQiC,UAAU,+BAA+BG,QAxEzD,WACEjC,EAAiB,IACjBJ,EAAkB,MAsEZ,UAGF,yBAAKkC,UAAU,YACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,sBAAf,YCzGZI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4be53a91.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport splitWordStyle from \"./style.css\";\nimport * as Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\n\nvar socket = new SockJS('https://brainbright.herokuapp.com/brainbright-websocket');\nvar stompClient = Stomp.over(socket);\n\nfunction getSplitWords(client) {\n  client.send(\"/app/getsplitwords\", {}, null);\n}\n\nexport default function ClientComponent() {\n  const [splitWords, setSplitWords] = useState([]);\n  const [splitWord, setSplitWord] = useState('');\n  const [splitWordArray, setSplitWordArray] = useState([]);\n  const [endResult, setEndResult] = useState('');\n  const [splitWordText, setSplitWordText] = useState([]);\n\n  useEffect(() => {\n\n    stompClient.connect({}, function () {\n\n      this.subscribe('/topic/splitwordlist', function (data) {\n        let array = new Array(24 - JSON.parse(data.body).length * 2).fill(' ');\n        JSON.parse(data.body).map((item) => {\n          array.splice(Math.floor(Math.random() * 24), 0, item.firstPart);\n          array.splice(Math.floor(Math.random() * 24), 0, item.secondPart);\n        });\n        setSplitWords(array);\n      });\n\n      getSplitWords(this);\n    });\n  }, []);\n\n  function clearContent() {\n    setSplitWordText([]);\n    setSplitWordArray([]);\n  }\n\n\n  function getButtonContent(e) {\n    if (splitWordArray.length >= 2) {\n      setSplitWordArray.length == 2 ? setSplitWordArray([]) : setSplitWordText([]);\n      setSplitWordArray([e.target.innerHTML]);\n      setSplitWordText([e.target.innerHTML]);\n    } else {\n      const newArray = splitWordArray;\n      newArray.push(e.target.innerHTML);\n      setSplitWordArray(newArray);\n      setSplitWordText(newArray);\n    }\n\n    if (splitWordArray.length === 2) {\n\n      setSplitWord('');\n      setSplitWordArray([]);\n      stompClient.subscribe('/topic/validactionresponse', function (splitwords) {\n        if (!JSON.parse(splitwords.body)) {\n          setEndResult('You are wrong');\n        } else {\n          setEndResult('You are correct');\n        }\n      });\n      stompClient.send(\"/app/validaction\", {}, JSON.stringify({ \"firstPart\": splitWordArray[0], \"secondPart\": splitWordArray[1] }));\n    }\n  }\n\n  return (\n    <div className=\"container-fluid\">\n\n      <div className=\"row\">\n        <div className=\"col-md-3\">\n          <div className=\"d-flex\">\n            <div className=\"player\">\n              Player:\n                </div>\n            <div className=\"player-name\">\n              Name\n              </div>\n          </div>\n\n          <div className=\"\">\n            Level\n            </div>\n          <div className=\"\">\n            Menu\n            </div>\n        </div>\n        <div className=\"col-md-6 text-center all_words\">\n          <div className=\"row\">\n            {\n              splitWords.map((item) =>\n                <div className=\"col-md-3 col-sm-6\" key={item.word}>\n                  {item !== ' ' ? <button className=\"btn btn-primary mb-5 p-3 rounded border-0\" onClick={getButtonContent}>{item}</button> : <br></br>}\n                </div>\n              )\n            }\n\n          </div>\n          <div className=\"result p-2\">{\n            splitWordText.length == 0 ? \"Click a button...\" :\n              splitWordText.map((item) =>\n                <span>{item}</span>\n              )\n          }</div>\n          <div className=\"mt-3\">{endResult}</div>\n          <button className=\"btn pl-5 pr-5 pt-2 pb-2 mt-3\" onClick={clearContent}>Clear</button>\n\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"text-center\">\n            <div className=\"border border-dark\">test</div>\n          </div>\n\n        </div>\n\n      </div> \n    </div>\n  )\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SplitWords from \"./components/splitWords/splitWords\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SplitWords />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}