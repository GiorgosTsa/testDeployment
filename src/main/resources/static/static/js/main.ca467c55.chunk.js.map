{"version":3,"sources":["serviceWorker.js","components/splitWords/splitWords.jsx","components/namesAnimalsPlants/namesAnimalsPlants.jsx","index.js"],"names":["Boolean","window","location","hostname","match","socket","SockJS","Stomp","stompClient","submittedFieldID","isValidAction","event","keyCode","target","id","console","log","word","document","getElementById","value","toUpperCase","send","JSON","stringify","ClientComponent","useState","napCharacter","setNapCharacter","setSplitWordArray","endResult","setSplitWordText","categories","useEffect","connect","this","subscribe","data","body","innerHTML","disabled","style","backgroundColor","className","map","item","key","type","name","onKeyDown","onClick","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kDCbFC,EAAS,IAAIC,IAAO,2DACNC,OAAWF,G,UCAzBA,EAAS,IAAIC,IAAO,2DACpBE,EAAcD,OAAWF,GAEzBI,EAAkB,IAItB,SAASC,EAAcC,GACnB,GAAsB,KAAlBA,EAAMC,QAAgB,CACtBH,EAAmBE,EAAME,OAAOC,GAChCC,QAAQC,IAAIP,GACZ,IAAIQ,EAAOC,SAASC,eAAeV,GAAkBW,MAAMC,cAC3Db,EAAYc,KAAK,uBAAwB,GAAIC,KAAKC,UAAU,CAAE,KAAQP,EAAM,KAAQN,EAAME,OAAOC,OAG1F,SAASW,IAAmB,IAAD,EACJC,mBAAS,IADL,gCAEFA,mBAAS,KAFP,gCAGEA,mBAAS,KAHX,mBAG/BC,EAH+B,KAGjBC,EAHiB,OAIMF,mBAAS,IAJf,mBAIfG,GAJe,aAKJH,mBAAS,IALL,mBAK/BI,EAL+B,aAMIJ,mBAAS,KANb,mBAMhBK,GANgB,aAQFL,mBAAS,CAAC,QAAS,SAAU,aAAc,OAAQ,YARjD,mBAQ/BM,EAR+B,UAqEtC,OA3DAC,qBAAU,WAENzB,EAAY0B,QAAQ,IAAI,WAEpBC,KAAKC,UAAU,mCAAmC,SAAUC,GACxDtB,QAAQC,IAAIqB,EAAKC,MACjBV,EAAgBS,EAAKC,SAGTH,KA7BjBb,KAAK,wBAAyB,GAAI,MA8BjCa,KAAKC,UAAU,kCAAkC,SAAUC,GACtC,GAAbA,EAAKC,MACLpB,SAASC,eAAe,UAAUoB,UAAY,kBAC9CrB,SAASC,eAAeV,GAAkBW,MAAQ,IAC9B,GAAbiB,EAAKC,MACZpB,SAASC,eAAe,UAAUoB,UAAY,gBAC9CrB,SAASC,eAAeV,GAAkB+B,UAAW,EACrDtB,SAASC,eAAeV,GAAkBgC,MAAMC,gBAAkB,eAElExB,SAASC,eAAe,UAAUoB,UAAY,mCAC9CrB,SAASC,eAAeV,GAAkB+B,SAAW,oBAIlE,IAoCC,yBAAKG,UAAU,mBAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,UAAf,WAGA,yBAAKA,UAAU,eAAf,SAKJ,yBAAKA,UAAU,IAAf,SAGA,yBAAKA,UAAU,IAAf,SAMJ,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,2BACX,0BAA4BhB,GAEhC,yBAAKgB,UAAU,OAEPX,EAAWY,KAAI,SAACC,GAAD,OACX,yBAAKF,UAAU,oBAAoBG,IAAKD,EAAK5B,MAC/B,MAAT4B,EAAe,2BAAIA,GAAY,6BAChC,+BAEI,2BAAOE,KAAK,OAAOC,KAAK,OAAOlC,GAAI+B,EAAMI,UAAWvC,SAKpE,yBAAKiC,UAAU,aAAa7B,GAAG,UAC3B,gCAKR,yBAAK6B,UAAU,QAAQb,GACvB,4BAAQa,UAAU,+BAA+BO,QA/EjE,WACInB,EAAiB,IACjBF,EAAkB,MA6EN,UAGJ,yBAAKc,UAAU,YACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sBAAf,uBCpIxBQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFnC,SAASC,eAAe,SHqHpB,kBAAmBmC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.ca467c55.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport splitWordStyle from \"./style.css\";\r\nimport * as Stomp from \"stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\n\r\nvar socket = new SockJS('https://brainbright.herokuapp.com/brainbright-websocket');\r\nvar stompClient = Stomp.over(socket);\r\n\r\nfunction getSplitWords(client) {\r\n  client.send(\"/app/getsplitwords\", {}, null);\r\n}\r\n\r\nexport default function ClientComponent() {\r\n  const [splitWords, setSplitWords] = useState([]);\r\n  const [splitWord, setSplitWord] = useState('');\r\n  const [splitWordArray, setSplitWordArray] = useState([]);\r\n  const [endResult, setEndResult] = useState('');\r\n  const [splitWordText, setSplitWordText] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    stompClient.connect({}, function () {\r\n\r\n      this.subscribe('/topic/splitwordlist', function (data) {\r\n        let array = new Array(24 - JSON.parse(data.body).length * 2).fill(' ');\r\n        JSON.parse(data.body).map((item) => {\r\n          array.splice(Math.floor(Math.random() * 24), 0, item.firstPart);\r\n          array.splice(Math.floor(Math.random() * 24), 0, item.secondPart);\r\n        });\r\n        setSplitWords(array);\r\n      });\r\n\r\n      getSplitWords(this);\r\n    });\r\n  }, []);\r\n\r\n  function clearContent() {\r\n    setSplitWordText([]);\r\n    setSplitWordArray([]);\r\n  }\r\n\r\n\r\n  function getButtonContent(e) {\r\n    if (splitWordArray.length >= 2) {\r\n      setSplitWordArray.length == 2 ? setSplitWordArray([]) : setSplitWordText([]);\r\n      setSplitWordArray([e.target.innerHTML]);\r\n      setSplitWordText([e.target.innerHTML]);\r\n    } else {\r\n      const newArray = splitWordArray;\r\n      newArray.push(e.target.innerHTML);\r\n      setSplitWordArray(newArray);\r\n      setSplitWordText(newArray);\r\n    }\r\n\r\n    if (splitWordArray.length === 2) {\r\n\r\n      setSplitWord('');\r\n      setSplitWordArray([]);\r\n      stompClient.subscribe('/topic/validactionresponse', function (splitwords) {\r\n        if (!JSON.parse(splitwords.body)) {\r\n          setEndResult('You are wrong');\r\n        } else {\r\n          setEndResult('You are correct');\r\n        }\r\n      });\r\n      stompClient.send(\"/app/validaction\", {}, JSON.stringify({ \"firstPart\": splitWordArray[0], \"secondPart\": splitWordArray[1] }));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"player\">\r\n              Player:\r\n                </div>\r\n            <div className=\"player-name\">\r\n              Name\r\n              </div>\r\n          </div>\r\n\r\n          <div className=\"\">\r\n            Level\r\n            </div>\r\n          <div className=\"\">\r\n            Menu\r\n            </div>\r\n        </div>\r\n        <div className=\"col-md-6 text-center all_words\">\r\n          <div className=\"row\">\r\n            {\r\n              splitWords.map((item) =>\r\n                <div className=\"col-md-3 col-sm-6\" key={item.word}>\r\n                  {item !== ' ' ? <button className=\"btn btn-primary mb-5 p-3 rounded border-0\" onClick={getButtonContent}>{item}</button> : <br></br>}\r\n                </div>\r\n              )\r\n            }\r\n\r\n          </div>\r\n          <div className=\"result p-2\">{\r\n            splitWordText.length == 0 ? \"Click a button...\" :\r\n              splitWordText.map((item) =>\r\n                <span>{item}</span>\r\n              )\r\n          }</div>\r\n          <div className=\"mt-3\">{endResult}</div>\r\n          <button className=\"btn pl-5 pr-5 pt-2 pb-2 mt-3\" onClick={clearContent}>Clear</button>\r\n\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"text-center\">\r\n            <div className=\"border border-dark\">test</div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport splitWordStyle from \"./style.css\";\r\nimport * as Stomp from \"stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\n\r\n//\r\nvar socket = new SockJS('https://brainbright.herokuapp.com/brainbright-websocket');\r\nvar stompClient = Stomp.over(socket);\r\n\r\nlet submittedFieldID= \" \";\r\nfunction getNapCharacter(client) {\r\n    client.send(\"/app/nap_getcharacter\", {}, null);\r\n}\r\nfunction isValidAction(event) {\r\n    if (event.keyCode === 13) {\r\n        submittedFieldID = event.target.id;\r\n        console.log(submittedFieldID);\r\n        let word = document.getElementById(submittedFieldID).value.toUpperCase();\r\n        stompClient.send(\"/app/nap_validaction\", {}, JSON.stringify({ \"word\": word, \"type\": event.target.id }));\r\n    }\r\n}\r\nexport default function ClientComponent() {\r\n    const [splitWord, setSplitWord] = useState('');\r\n    const [splitWords, setSplitWords] = useState([]);\r\n    const [napCharacter, setNapCharacter] = useState('');\r\n    const [splitWordArray, setSplitWordArray] = useState([]);\r\n    const [endResult, setEndResult] = useState('');\r\n    const [splitWordText, setSplitWordText] = useState([]);\r\n\r\n    const [categories, setCategories] = useState([\"plant\", \"animal\", \"occupation\", \"name\", \"country\"]);\r\n\r\n    useEffect(() => {\r\n\r\n        stompClient.connect({}, function () {\r\n\r\n            this.subscribe('/topic/nap_getcharacterresponse', function (data) {\r\n                console.log(data.body);\r\n                setNapCharacter(data.body);\r\n            });\r\n\r\n            getNapCharacter(this);\r\n            this.subscribe('/topic/nap_validactionresponse', function (data) {\r\n                if (data.body == 0) {\r\n                    document.getElementById(\"result\").innerHTML = \"Incorrect word!\";\r\n                    document.getElementById(submittedFieldID).value = \"\";\r\n                } else if (data.body == 1) {\r\n                    document.getElementById(\"result\").innerHTML = \"Correct word!\";\r\n                    document.getElementById(submittedFieldID).disabled = true;\r\n                    document.getElementById(submittedFieldID).style.backgroundColor = \"lightgreen\";\r\n                } else { //data === -1\r\n                    document.getElementById(\"result\").innerHTML = \"You already submitted that word!\";\r\n                    document.getElementById(submittedFieldID).disabled = \"lightred\";\r\n                }\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    function clearContent() {\r\n        setSplitWordText([]);\r\n        setSplitWordArray([]);\r\n    }\r\n\r\n\r\n    function getButtonContent(e) {\r\n        if (splitWordArray.length >= 2) {\r\n            setSplitWordArray.length == 2 ? setSplitWordArray([]) : setSplitWordText([]);\r\n            setSplitWordArray([e.target.innerHTML]);\r\n            setSplitWordText([e.target.innerHTML]);\r\n        } else {\r\n            const newArray = splitWordArray;\r\n            newArray.push(e.target.innerHTML);\r\n            setSplitWordArray(newArray);\r\n            setSplitWordText(newArray);\r\n        }\r\n\r\n        if (splitWordArray.length === 2) {\r\n\r\n            setSplitWord('');\r\n            setSplitWordArray([]);\r\n            stompClient.subscribe('/topic/validactionresponse', function (splitwords) {\r\n                if (!JSON.parse(splitwords.body)) {\r\n                    setEndResult('You are wrong');\r\n                } else {\r\n                    setEndResult('You are correct');\r\n                }\r\n            });\r\n            stompClient.send(\"/app/validaction\", {}, JSON.stringify({ \"firstPart\": splitWordArray[0], \"secondPart\": splitWordArray[1] }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                    <div className=\"d-flex\">\r\n                        <div className=\"player\">\r\n                            Player:\r\n                </div>\r\n                        <div className=\"player-name\">\r\n                            Name\r\n              </div>\r\n                    </div>\r\n\r\n                    <div className=\"\">\r\n                        Level\r\n            </div>\r\n                    <div className=\"\">\r\n                        Menu\r\n            </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"col-md-6 text-center all_words\">\r\n                    <div className=\"starting-character p-2 \">{\r\n                        \"The chosen character is\" + napCharacter\r\n                    }</div>\r\n                    <div className=\"row\">\r\n                        {\r\n                            categories.map((item) =>\r\n                                <div className=\"col-md-3 col-sm-6\" key={item.word}>\r\n                                    {item !== ' ' ? <p>{item}</p> : <br></br>}\r\n                                    <label>\r\n\r\n                                        <input type=\"text\" name=\"name\" id={item} onKeyDown={isValidAction} />\r\n                                    </label>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        <div className=\"result p-2\" id=\"result\">{\r\n                            \"Waiting to submit a word...\"\r\n                        }</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"mt-3\">{endResult}</div>\r\n                    <button className=\"btn pl-5 pr-5 pt-2 pb-2 mt-3\" onClick={clearContent}>Clear</button>\r\n\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <div className=\"text-center\">\r\n                        <div className=\"border border-dark\">Submitted words</div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SplitWords from \"./components/splitWords/splitWords\";\r\nimport NamesAnimalsPlants from \"./components/namesAnimalsPlants/namesAnimalsPlants\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <NamesAnimalsPlants />\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}