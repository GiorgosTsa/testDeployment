{"version":3,"sources":["logo.svg","serviceWorker.js","components/splitWords.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ClientComponent","useState","splitWords","setSplitWords","setResult","setSplitWord","splitWordArray","setSplitWordArray","endResult","setEndResult","GetButtonContent","e","length","target","innerHTML","newArray","push","socket","socketIOClient","console","log","emit","join","on","data","useEffect","className","map","item","key","word","onClick","firstPart","secondPart","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,+LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCdS,SAASC,IAAmB,IAAD,EACJC,mBAAS,IADL,mBACjCC,EADiC,KACrBC,EADqB,OAEZF,qBAFY,mBAEzBG,GAFyB,aAGNH,mBAAS,IAHH,mBAGtBI,GAHsB,aAIIJ,mBAAS,IAJb,mBAIjCK,EAJiC,KAIjBC,EAJiB,OAKNN,mBAAS,IALH,mBAKjCO,EALiC,KAKtBC,EALsB,KAcxC,SAASC,EAAiBC,GACxB,GAAIL,EAAeM,QAAU,EAC3BL,EAAkB,IAClBA,EAAkB,CAACI,EAAEE,OAAOC,gBACvB,CACL,IAAMC,EAAWT,EACjBS,EAASC,KAAKL,EAAEE,OAAOC,WACvBP,EAAkBQ,GAIpB,IAAME,EAASC,IA3BF,yBA4BbC,QAAQC,IAAId,EAAgBA,EAAeM,QACb,IAA1BN,EAAeM,SACjBK,EAAOI,KAAK,SAAUf,EAAegB,KAAK,KAC1CjB,EAAa,IACbE,EAAkB,IAClBU,EAAOM,GAAG,UAAU,SAAAC,GAClBpB,EAAUoB,GACVL,QAAQC,IAAII,GAEVf,EADEe,EACW,kBAEA,qBAOrB,OArCAC,qBAAU,WACOP,IAVF,yBAWNK,GAAG,mBAAmB,SAAAC,GAC3BrB,EAAcqB,EAAKtB,iBAEpB,IAiCD,yBAAKwB,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,UAAf,WAGA,yBAAKA,UAAU,eAAf,UAKJ,yBAAKA,UAAU,OAAf,SAGA,yBAAKA,UAAU,OAAf,SAIF,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OAEXxB,EAAWyB,KAAI,SAACC,GAAD,OACb,yBAAKF,UAAU,WAAWG,IAAKD,EAAKE,MAClC,4BAAQJ,UAAU,8BAA8BK,QAASrB,GAAmBkB,EAAKI,eAKrF9B,EAAWyB,KAAI,SAACC,GAAD,OACb,yBAAKF,UAAU,WAAWG,IAAKD,EAAKE,MAClC,4BAAQJ,UAAU,uBAAuBK,QAASrB,GAAmBkB,EAAKK,iBAMlF,yBAAKP,UAAU,OACb,+BACA,iDACA,yBAAKA,UAAU,gBACb,4BAAQA,UAAU,OAAlB,YAIN,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OAAf,SAEA,yBAAKA,UAAU,aAAalB,GAC1B,yBAAKkB,UAAU,aAAf,QC1FVQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.4af569cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:3050\";\n\nexport default function ClientComponent() {\n  const [splitWords, setSplitWords] = useState([]);\n  const [result, setResult] = useState();\n  const [splitWord, setSplitWord] = useState('');\n  const [splitWordArray, setSplitWordArray] = useState([]);\n  const [endResult, setEndResult] = useState('');\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"all_split_words\", data => {\n      setSplitWords(data.splitWords);\n    });\n  }, []);\n\n  function GetButtonContent(e) {\n    if (splitWordArray.length >= 2) {\n      setSplitWordArray([]);\n      setSplitWordArray([e.target.innerHTML]);\n    } else {\n      const newArray = splitWordArray;\n      newArray.push(e.target.innerHTML)\n      setSplitWordArray(newArray);\n    }\n\n\n    const socket = socketIOClient(ENDPOINT);\n    console.log(splitWordArray, splitWordArray.length)\n    if (splitWordArray.length === 2) {\n      socket.emit(\"result\", splitWordArray.join(''));\n      setSplitWord('');\n      setSplitWordArray([]);\n      socket.on(\"result\", data => {\n        setResult(data);\n        console.log(data);\n        if (data) {\n          setEndResult('You are correct');\n        } else {\n          setEndResult('You are wrong');\n        }\n      });\n    }\n\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-4\">\n        <div className=\"row\">\n          <div className=\"d-flex\">\n            <div className=\"player\">\n              Player:\n                    </div>\n            <div className=\"player-name\">\n              Name\n                    </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          Level\n            </div>\n        <div className=\"row\">\n          Menu\n            </div>\n      </div>\n      <div className=\"col-md-6\">\n        <div className=\"row\">\n          {\n            splitWords.map((item) =>\n              <div className=\"col-md-3\" key={item.word}>\n                <button className=\"btn btn-primary text-center\" onClick={GetButtonContent}>{item.firstPart}</button>\n              </div>\n            )\n          }\n          {\n            splitWords.map((item) =>\n              <div className=\"col-md-3\" key={item.word}>\n                <button className=\"btn btn-primary mb-3\" onClick={GetButtonContent}>{item.secondPart}</button>\n              </div>\n            )\n          }\n\n        </div>\n        <div className=\"row\">\n          <span></span>\n          <span>Incorrect pair:</span>\n          <div className=\"button-class\">\n            <button className=\"btn\">Clear</button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-2\">\n        <div className=\"row\">\n          Round:\n        <div className=\"col-md-12\">{endResult}</div>\n          <div className=\"col-md-12\">2</div>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SplitWords from \"./components/splitWords\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SplitWords />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}